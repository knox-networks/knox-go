// Code generated by MockGen. DO NOT EDIT.
// Source: knox.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	credential_adapter "github.com/knox-networks/knox-go/credential_adapter"
)

// MockWallet is a mock of Wallet interface.
type MockWallet struct {
	ctrl     *gomock.Controller
	recorder *MockWalletMockRecorder
}

// MockWalletMockRecorder is the mock recorder for MockWallet.
type MockWalletMockRecorder struct {
	mock *MockWallet
}

// NewMockWallet creates a new mock instance.
func NewMockWallet(ctrl *gomock.Controller) *MockWallet {
	mock := &MockWallet{ctrl: ctrl}
	mock.recorder = &MockWalletMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWallet) EXPECT() *MockWalletMockRecorder {
	return m.recorder
}

// GetDid mocks base method.
func (m *MockWallet) GetDid() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDid")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDid indicates an expected call of GetDid.
func (mr *MockWalletMockRecorder) GetDid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDid", reflect.TypeOf((*MockWallet)(nil).GetDid))
}

// Sign mocks base method.
func (m *MockWallet) Sign(message []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", message)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockWalletMockRecorder) Sign(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockWallet)(nil).Sign), message)
}

// MockKnoxClient is a mock of KnoxClient interface.
type MockKnoxClient struct {
	ctrl     *gomock.Controller
	recorder *MockKnoxClientMockRecorder
}

// MockKnoxClientMockRecorder is the mock recorder for MockKnoxClient.
type MockKnoxClientMockRecorder struct {
	mock *MockKnoxClient
}

// NewMockKnoxClient creates a new mock instance.
func NewMockKnoxClient(ctrl *gomock.Controller) *MockKnoxClient {
	mock := &MockKnoxClient{ctrl: ctrl}
	mock.recorder = &MockKnoxClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKnoxClient) EXPECT() *MockKnoxClientMockRecorder {
	return m.recorder
}

// PresentCredential mocks base method.
func (m *MockKnoxClient) PresentCredential(cred ...credential_adapter.VerifiableCredential) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range cred {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PresentCredential", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PresentCredential indicates an expected call of PresentCredential.
func (mr *MockKnoxClientMockRecorder) PresentCredential(cred ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentCredential", reflect.TypeOf((*MockKnoxClient)(nil).PresentCredential), cred...)
}

// RequestCredential mocks base method.
func (m *MockKnoxClient) RequestCredential(cred_type string) (credential_adapter.VerifiableCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestCredential", cred_type)
	ret0, _ := ret[0].(credential_adapter.VerifiableCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestCredential indicates an expected call of RequestCredential.
func (mr *MockKnoxClientMockRecorder) RequestCredential(cred_type interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestCredential", reflect.TypeOf((*MockKnoxClient)(nil).RequestCredential), cred_type)
}
