// Code generated by MockGen. DO NOT EDIT.
// Source: signer/signer.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDynamicSigner is a mock of DynamicSigner interface.
type MockDynamicSigner struct {
	ctrl     *gomock.Controller
	recorder *MockDynamicSignerMockRecorder
}

// MockDynamicSignerMockRecorder is the mock recorder for MockDynamicSigner.
type MockDynamicSignerMockRecorder struct {
	mock *MockDynamicSigner
}

// NewMockDynamicSigner creates a new mock instance.
func NewMockDynamicSigner(ctrl *gomock.Controller) *MockDynamicSigner {
	mock := &MockDynamicSigner{ctrl: ctrl}
	mock.recorder = &MockDynamicSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamicSigner) EXPECT() *MockDynamicSignerMockRecorder {
	return m.recorder
}

// GetDid mocks base method.
func (m *MockDynamicSigner) GetDid() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDid")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDid indicates an expected call of GetDid.
func (mr *MockDynamicSignerMockRecorder) GetDid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDid", reflect.TypeOf((*MockDynamicSigner)(nil).GetDid))
}

// Sign mocks base method.
func (m *MockDynamicSigner) Sign(message []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", message)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockDynamicSignerMockRecorder) Sign(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockDynamicSigner)(nil).Sign), message)
}
