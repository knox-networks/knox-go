// Code generated by MockGen. DO NOT EDIT.
// Source: buf.build/gen/go/knox-networks/credential-adapter/grpc/go/vc_api/v1/vc_apiv1grpc (interfaces: CredentialAdapterServiceClient)

// Package grpc_mock is a generated GoMock package.
package grpc_mock

import (
	context "context"
	reflect "reflect"

	vc_apiv1grpc "buf.build/gen/go/knox-networks/credential-adapter/grpc/go/vc_api/v1/vc_apiv1grpc"
	vc_apiv1 "buf.build/gen/go/knox-networks/credential-adapter/protocolbuffers/go/vc_api/v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCredentialAdapterServiceClient is a mock of CredentialAdapterServiceClient interface.
type MockCredentialAdapterServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialAdapterServiceClientMockRecorder
}

// MockCredentialAdapterServiceClientMockRecorder is the mock recorder for MockCredentialAdapterServiceClient.
type MockCredentialAdapterServiceClientMockRecorder struct {
	mock *MockCredentialAdapterServiceClient
}

// NewMockCredentialAdapterServiceClient creates a new mock instance.
func NewMockCredentialAdapterServiceClient(ctrl *gomock.Controller) *MockCredentialAdapterServiceClient {
	mock := &MockCredentialAdapterServiceClient{ctrl: ctrl}
	mock.recorder = &MockCredentialAdapterServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialAdapterServiceClient) EXPECT() *MockCredentialAdapterServiceClientMockRecorder {
	return m.recorder
}

// CreateIssuanceChallenge mocks base method.
func (m *MockCredentialAdapterServiceClient) CreateIssuanceChallenge(arg0 context.Context, arg1 *vc_apiv1.CreateIssuanceChallengeRequest, arg2 ...grpc.CallOption) (*vc_apiv1.CreateIssuanceChallengeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIssuanceChallenge", varargs...)
	ret0, _ := ret[0].(*vc_apiv1.CreateIssuanceChallengeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIssuanceChallenge indicates an expected call of CreateIssuanceChallenge.
func (mr *MockCredentialAdapterServiceClientMockRecorder) CreateIssuanceChallenge(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssuanceChallenge", reflect.TypeOf((*MockCredentialAdapterServiceClient)(nil).CreateIssuanceChallenge), varargs...)
}

// CreatePresentationChallenge mocks base method.
func (m *MockCredentialAdapterServiceClient) CreatePresentationChallenge(arg0 context.Context, arg1 *vc_apiv1.CreatePresentationChallengeRequest, arg2 ...grpc.CallOption) (*vc_apiv1.CreatePresentationChallengeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePresentationChallenge", varargs...)
	ret0, _ := ret[0].(*vc_apiv1.CreatePresentationChallengeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePresentationChallenge indicates an expected call of CreatePresentationChallenge.
func (mr *MockCredentialAdapterServiceClientMockRecorder) CreatePresentationChallenge(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePresentationChallenge", reflect.TypeOf((*MockCredentialAdapterServiceClient)(nil).CreatePresentationChallenge), varargs...)
}

// IssueVerifiableCredential mocks base method.
func (m *MockCredentialAdapterServiceClient) IssueVerifiableCredential(arg0 context.Context, arg1 *vc_apiv1.IssueVerifiableCredentialRequest, arg2 ...grpc.CallOption) (*vc_apiv1.IssueVerifiableCredentialResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IssueVerifiableCredential", varargs...)
	ret0, _ := ret[0].(*vc_apiv1.IssueVerifiableCredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueVerifiableCredential indicates an expected call of IssueVerifiableCredential.
func (mr *MockCredentialAdapterServiceClientMockRecorder) IssueVerifiableCredential(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueVerifiableCredential", reflect.TypeOf((*MockCredentialAdapterServiceClient)(nil).IssueVerifiableCredential), varargs...)
}

// PresentVerifiableCredential mocks base method.
func (m *MockCredentialAdapterServiceClient) PresentVerifiableCredential(arg0 context.Context, arg1 *vc_apiv1.PresentVerifiableCredentialRequest, arg2 ...grpc.CallOption) (*vc_apiv1.PresentVerifiableCredentialResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PresentVerifiableCredential", varargs...)
	ret0, _ := ret[0].(*vc_apiv1.PresentVerifiableCredentialResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PresentVerifiableCredential indicates an expected call of PresentVerifiableCredential.
func (mr *MockCredentialAdapterServiceClientMockRecorder) PresentVerifiableCredential(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresentVerifiableCredential", reflect.TypeOf((*MockCredentialAdapterServiceClient)(nil).PresentVerifiableCredential), varargs...)
}

// WaitForCompletion mocks base method.
func (m *MockCredentialAdapterServiceClient) WaitForCompletion(arg0 context.Context, arg1 *vc_apiv1.WaitForCompletionRequest, arg2 ...grpc.CallOption) (vc_apiv1grpc.CredentialAdapterService_WaitForCompletionClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitForCompletion", varargs...)
	ret0, _ := ret[0].(vc_apiv1grpc.CredentialAdapterService_WaitForCompletionClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForCompletion indicates an expected call of WaitForCompletion.
func (mr *MockCredentialAdapterServiceClientMockRecorder) WaitForCompletion(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForCompletion", reflect.TypeOf((*MockCredentialAdapterServiceClient)(nil).WaitForCompletion), varargs...)
}
