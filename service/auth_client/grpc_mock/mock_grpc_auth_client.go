// Code generated by MockGen. DO NOT EDIT.
// Source: go.buf.build/grpc/go/knox-networks/auth-mgmt/auth_api/v1 (interfaces: AuthApiService_AuthnWithDidRegisterStartClient,AuthApiServiceClient,AuthApiService_AuthnWithDidStartClient)

// Package grpc_mock is a generated GoMock package.
package grpc_mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	auth_apiv1 "go.buf.build/grpc/go/knox-networks/auth-mgmt/auth_api/v1"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockAuthApiService_AuthnWithDidRegisterStartClient is a mock of AuthApiService_AuthnWithDidRegisterStartClient interface.
type MockAuthApiService_AuthnWithDidRegisterStartClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthApiService_AuthnWithDidRegisterStartClientMockRecorder
}

// MockAuthApiService_AuthnWithDidRegisterStartClientMockRecorder is the mock recorder for MockAuthApiService_AuthnWithDidRegisterStartClient.
type MockAuthApiService_AuthnWithDidRegisterStartClientMockRecorder struct {
	mock *MockAuthApiService_AuthnWithDidRegisterStartClient
}

// NewMockAuthApiService_AuthnWithDidRegisterStartClient creates a new mock instance.
func NewMockAuthApiService_AuthnWithDidRegisterStartClient(ctrl *gomock.Controller) *MockAuthApiService_AuthnWithDidRegisterStartClient {
	mock := &MockAuthApiService_AuthnWithDidRegisterStartClient{ctrl: ctrl}
	mock.recorder = &MockAuthApiService_AuthnWithDidRegisterStartClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthApiService_AuthnWithDidRegisterStartClient) EXPECT() *MockAuthApiService_AuthnWithDidRegisterStartClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockAuthApiService_AuthnWithDidRegisterStartClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockAuthApiService_AuthnWithDidRegisterStartClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockAuthApiService_AuthnWithDidRegisterStartClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockAuthApiService_AuthnWithDidRegisterStartClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAuthApiService_AuthnWithDidRegisterStartClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAuthApiService_AuthnWithDidRegisterStartClient)(nil).Context))
}

// Header mocks base method.
func (m *MockAuthApiService_AuthnWithDidRegisterStartClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockAuthApiService_AuthnWithDidRegisterStartClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockAuthApiService_AuthnWithDidRegisterStartClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockAuthApiService_AuthnWithDidRegisterStartClient) Recv() (*auth_apiv1.AuthnWithDidRegisterStartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*auth_apiv1.AuthnWithDidRegisterStartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockAuthApiService_AuthnWithDidRegisterStartClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockAuthApiService_AuthnWithDidRegisterStartClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockAuthApiService_AuthnWithDidRegisterStartClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAuthApiService_AuthnWithDidRegisterStartClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAuthApiService_AuthnWithDidRegisterStartClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockAuthApiService_AuthnWithDidRegisterStartClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAuthApiService_AuthnWithDidRegisterStartClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAuthApiService_AuthnWithDidRegisterStartClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockAuthApiService_AuthnWithDidRegisterStartClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockAuthApiService_AuthnWithDidRegisterStartClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockAuthApiService_AuthnWithDidRegisterStartClient)(nil).Trailer))
}

// MockAuthApiServiceClient is a mock of AuthApiServiceClient interface.
type MockAuthApiServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthApiServiceClientMockRecorder
}

// MockAuthApiServiceClientMockRecorder is the mock recorder for MockAuthApiServiceClient.
type MockAuthApiServiceClientMockRecorder struct {
	mock *MockAuthApiServiceClient
}

// NewMockAuthApiServiceClient creates a new mock instance.
func NewMockAuthApiServiceClient(ctrl *gomock.Controller) *MockAuthApiServiceClient {
	mock := &MockAuthApiServiceClient{ctrl: ctrl}
	mock.recorder = &MockAuthApiServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthApiServiceClient) EXPECT() *MockAuthApiServiceClientMockRecorder {
	return m.recorder
}

// AuthenticateWithDid mocks base method.
func (m *MockAuthApiServiceClient) AuthenticateWithDid(arg0 context.Context, arg1 *auth_apiv1.AuthenticateWithDidRequest, arg2 ...grpc.CallOption) (*auth_apiv1.AuthenticateWithDidResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthenticateWithDid", varargs...)
	ret0, _ := ret[0].(*auth_apiv1.AuthenticateWithDidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateWithDid indicates an expected call of AuthenticateWithDid.
func (mr *MockAuthApiServiceClientMockRecorder) AuthenticateWithDid(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateWithDid", reflect.TypeOf((*MockAuthApiServiceClient)(nil).AuthenticateWithDid), varargs...)
}

// AuthnWithDid mocks base method.
func (m *MockAuthApiServiceClient) AuthnWithDid(arg0 context.Context, arg1 *auth_apiv1.AuthnWithDidRequest, arg2 ...grpc.CallOption) (*auth_apiv1.AuthnWithDidResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthnWithDid", varargs...)
	ret0, _ := ret[0].(*auth_apiv1.AuthnWithDidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthnWithDid indicates an expected call of AuthnWithDid.
func (mr *MockAuthApiServiceClientMockRecorder) AuthnWithDid(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthnWithDid", reflect.TypeOf((*MockAuthApiServiceClient)(nil).AuthnWithDid), varargs...)
}

// AuthnWithDidRegister mocks base method.
func (m *MockAuthApiServiceClient) AuthnWithDidRegister(arg0 context.Context, arg1 *auth_apiv1.AuthnWithDidRegisterRequest, arg2 ...grpc.CallOption) (*auth_apiv1.AuthnWithDidRegisterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthnWithDidRegister", varargs...)
	ret0, _ := ret[0].(*auth_apiv1.AuthnWithDidRegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthnWithDidRegister indicates an expected call of AuthnWithDidRegister.
func (mr *MockAuthApiServiceClientMockRecorder) AuthnWithDidRegister(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthnWithDidRegister", reflect.TypeOf((*MockAuthApiServiceClient)(nil).AuthnWithDidRegister), varargs...)
}

// AuthnWithDidRegisterStart mocks base method.
func (m *MockAuthApiServiceClient) AuthnWithDidRegisterStart(arg0 context.Context, arg1 *auth_apiv1.AuthnWithDidRegisterStartRequest, arg2 ...grpc.CallOption) (auth_apiv1.AuthApiService_AuthnWithDidRegisterStartClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthnWithDidRegisterStart", varargs...)
	ret0, _ := ret[0].(auth_apiv1.AuthApiService_AuthnWithDidRegisterStartClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthnWithDidRegisterStart indicates an expected call of AuthnWithDidRegisterStart.
func (mr *MockAuthApiServiceClientMockRecorder) AuthnWithDidRegisterStart(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthnWithDidRegisterStart", reflect.TypeOf((*MockAuthApiServiceClient)(nil).AuthnWithDidRegisterStart), varargs...)
}

// AuthnWithDidStart mocks base method.
func (m *MockAuthApiServiceClient) AuthnWithDidStart(arg0 context.Context, arg1 *auth_apiv1.AuthnWithDidStartRequest, arg2 ...grpc.CallOption) (auth_apiv1.AuthApiService_AuthnWithDidStartClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthnWithDidStart", varargs...)
	ret0, _ := ret[0].(auth_apiv1.AuthApiService_AuthnWithDidStartClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthnWithDidStart indicates an expected call of AuthnWithDidStart.
func (mr *MockAuthApiServiceClientMockRecorder) AuthnWithDidStart(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthnWithDidStart", reflect.TypeOf((*MockAuthApiServiceClient)(nil).AuthnWithDidStart), varargs...)
}

// AuthnWithExPrdCallback mocks base method.
func (m *MockAuthApiServiceClient) AuthnWithExPrdCallback(arg0 context.Context, arg1 *auth_apiv1.AuthnWithExPrdCallbackRequest, arg2 ...grpc.CallOption) (*auth_apiv1.AuthnWithExPrdCallbackResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthnWithExPrdCallback", varargs...)
	ret0, _ := ret[0].(*auth_apiv1.AuthnWithExPrdCallbackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthnWithExPrdCallback indicates an expected call of AuthnWithExPrdCallback.
func (mr *MockAuthApiServiceClientMockRecorder) AuthnWithExPrdCallback(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthnWithExPrdCallback", reflect.TypeOf((*MockAuthApiServiceClient)(nil).AuthnWithExPrdCallback), varargs...)
}

// AuthnWithExPrdStart mocks base method.
func (m *MockAuthApiServiceClient) AuthnWithExPrdStart(arg0 context.Context, arg1 *auth_apiv1.AuthnWithExPrdStartRequest, arg2 ...grpc.CallOption) (*auth_apiv1.AuthnWithExPrdStartResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthnWithExPrdStart", varargs...)
	ret0, _ := ret[0].(*auth_apiv1.AuthnWithExPrdStartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthnWithExPrdStart indicates an expected call of AuthnWithExPrdStart.
func (mr *MockAuthApiServiceClientMockRecorder) AuthnWithExPrdStart(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthnWithExPrdStart", reflect.TypeOf((*MockAuthApiServiceClient)(nil).AuthnWithExPrdStart), varargs...)
}

// AuthnWithPassword mocks base method.
func (m *MockAuthApiServiceClient) AuthnWithPassword(arg0 context.Context, arg1 *auth_apiv1.AuthnWithPasswordRequest, arg2 ...grpc.CallOption) (*auth_apiv1.AuthnWithPasswordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthnWithPassword", varargs...)
	ret0, _ := ret[0].(*auth_apiv1.AuthnWithPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthnWithPassword indicates an expected call of AuthnWithPassword.
func (mr *MockAuthApiServiceClientMockRecorder) AuthnWithPassword(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthnWithPassword", reflect.TypeOf((*MockAuthApiServiceClient)(nil).AuthnWithPassword), varargs...)
}

// AuthnWithRefresh mocks base method.
func (m *MockAuthApiServiceClient) AuthnWithRefresh(arg0 context.Context, arg1 *auth_apiv1.AuthnWithRefreshRequest, arg2 ...grpc.CallOption) (*auth_apiv1.AuthnWithRefreshResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthnWithRefresh", varargs...)
	ret0, _ := ret[0].(*auth_apiv1.AuthnWithRefreshResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthnWithRefresh indicates an expected call of AuthnWithRefresh.
func (mr *MockAuthApiServiceClientMockRecorder) AuthnWithRefresh(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthnWithRefresh", reflect.TypeOf((*MockAuthApiServiceClient)(nil).AuthnWithRefresh), varargs...)
}

// ConfirmRegister mocks base method.
func (m *MockAuthApiServiceClient) ConfirmRegister(arg0 context.Context, arg1 *auth_apiv1.ConfirmRegisterRequest, arg2 ...grpc.CallOption) (*auth_apiv1.ConfirmRegisterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConfirmRegister", varargs...)
	ret0, _ := ret[0].(*auth_apiv1.ConfirmRegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmRegister indicates an expected call of ConfirmRegister.
func (mr *MockAuthApiServiceClientMockRecorder) ConfirmRegister(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmRegister", reflect.TypeOf((*MockAuthApiServiceClient)(nil).ConfirmRegister), varargs...)
}

// CreateDidAuthenticationChallenge mocks base method.
func (m *MockAuthApiServiceClient) CreateDidAuthenticationChallenge(arg0 context.Context, arg1 *auth_apiv1.CreateDidAuthenticationChallengeRequest, arg2 ...grpc.CallOption) (*auth_apiv1.CreateDidAuthenticationChallengeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDidAuthenticationChallenge", varargs...)
	ret0, _ := ret[0].(*auth_apiv1.CreateDidAuthenticationChallengeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDidAuthenticationChallenge indicates an expected call of CreateDidAuthenticationChallenge.
func (mr *MockAuthApiServiceClientMockRecorder) CreateDidAuthenticationChallenge(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDidAuthenticationChallenge", reflect.TypeOf((*MockAuthApiServiceClient)(nil).CreateDidAuthenticationChallenge), varargs...)
}

// FindByEmail mocks base method.
func (m *MockAuthApiServiceClient) FindByEmail(arg0 context.Context, arg1 *auth_apiv1.FindByEmailRequest, arg2 ...grpc.CallOption) (*auth_apiv1.FindByEmailResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByEmail", varargs...)
	ret0, _ := ret[0].(*auth_apiv1.FindByEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockAuthApiServiceClientMockRecorder) FindByEmail(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockAuthApiServiceClient)(nil).FindByEmail), varargs...)
}

// FindByID mocks base method.
func (m *MockAuthApiServiceClient) FindByID(arg0 context.Context, arg1 *auth_apiv1.FindByIDRequest, arg2 ...grpc.CallOption) (*auth_apiv1.FindByIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByID", varargs...)
	ret0, _ := ret[0].(*auth_apiv1.FindByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockAuthApiServiceClientMockRecorder) FindByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockAuthApiServiceClient)(nil).FindByID), varargs...)
}

// GetMe mocks base method.
func (m *MockAuthApiServiceClient) GetMe(arg0 context.Context, arg1 *auth_apiv1.GetMeRequest, arg2 ...grpc.CallOption) (*auth_apiv1.GetMeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMe", varargs...)
	ret0, _ := ret[0].(*auth_apiv1.GetMeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMe indicates an expected call of GetMe.
func (mr *MockAuthApiServiceClientMockRecorder) GetMe(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMe", reflect.TypeOf((*MockAuthApiServiceClient)(nil).GetMe), varargs...)
}

// Register mocks base method.
func (m *MockAuthApiServiceClient) Register(arg0 context.Context, arg1 *auth_apiv1.RegisterRequest, arg2 ...grpc.CallOption) (*auth_apiv1.RegisterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(*auth_apiv1.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthApiServiceClientMockRecorder) Register(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthApiServiceClient)(nil).Register), varargs...)
}

// MockAuthApiService_AuthnWithDidStartClient is a mock of AuthApiService_AuthnWithDidStartClient interface.
type MockAuthApiService_AuthnWithDidStartClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthApiService_AuthnWithDidStartClientMockRecorder
}

// MockAuthApiService_AuthnWithDidStartClientMockRecorder is the mock recorder for MockAuthApiService_AuthnWithDidStartClient.
type MockAuthApiService_AuthnWithDidStartClientMockRecorder struct {
	mock *MockAuthApiService_AuthnWithDidStartClient
}

// NewMockAuthApiService_AuthnWithDidStartClient creates a new mock instance.
func NewMockAuthApiService_AuthnWithDidStartClient(ctrl *gomock.Controller) *MockAuthApiService_AuthnWithDidStartClient {
	mock := &MockAuthApiService_AuthnWithDidStartClient{ctrl: ctrl}
	mock.recorder = &MockAuthApiService_AuthnWithDidStartClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthApiService_AuthnWithDidStartClient) EXPECT() *MockAuthApiService_AuthnWithDidStartClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockAuthApiService_AuthnWithDidStartClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockAuthApiService_AuthnWithDidStartClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockAuthApiService_AuthnWithDidStartClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockAuthApiService_AuthnWithDidStartClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockAuthApiService_AuthnWithDidStartClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockAuthApiService_AuthnWithDidStartClient)(nil).Context))
}

// Header mocks base method.
func (m *MockAuthApiService_AuthnWithDidStartClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockAuthApiService_AuthnWithDidStartClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockAuthApiService_AuthnWithDidStartClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockAuthApiService_AuthnWithDidStartClient) Recv() (*auth_apiv1.AuthnWithDidStartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*auth_apiv1.AuthnWithDidStartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockAuthApiService_AuthnWithDidStartClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockAuthApiService_AuthnWithDidStartClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockAuthApiService_AuthnWithDidStartClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockAuthApiService_AuthnWithDidStartClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockAuthApiService_AuthnWithDidStartClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockAuthApiService_AuthnWithDidStartClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockAuthApiService_AuthnWithDidStartClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockAuthApiService_AuthnWithDidStartClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockAuthApiService_AuthnWithDidStartClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockAuthApiService_AuthnWithDidStartClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockAuthApiService_AuthnWithDidStartClient)(nil).Trailer))
}
