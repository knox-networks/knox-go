// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/auth_client/auth_client.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	auth_client "github.com/knox-networks/knox-go/service/auth_client"
	auth_apiv1 "go.buf.build/grpc/go/knox-networks/auth-mgmt/auth_api/v1"
)

// MockStreamClient is a mock of StreamClient interface.
type MockStreamClient struct {
	ctrl     *gomock.Controller
	recorder *MockStreamClientMockRecorder
}

// MockStreamClientMockRecorder is the mock recorder for MockStreamClient.
type MockStreamClientMockRecorder struct {
	mock *MockStreamClient
}

// NewMockStreamClient creates a new mock instance.
func NewMockStreamClient(ctrl *gomock.Controller) *MockStreamClient {
	mock := &MockStreamClient{ctrl: ctrl}
	mock.recorder = &MockStreamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamClient) EXPECT() *MockStreamClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStreamClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStreamClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStreamClient)(nil).Close))
}

// WaitForCompletion mocks base method.
func (m *MockStreamClient) WaitForCompletion() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForCompletion")
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForCompletion indicates an expected call of WaitForCompletion.
func (mr *MockStreamClientMockRecorder) WaitForCompletion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForCompletion", reflect.TypeOf((*MockStreamClient)(nil).WaitForCompletion))
}

// MockAuthClient is a mock of AuthClient interface.
type MockAuthClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthClientMockRecorder
}

// MockAuthClientMockRecorder is the mock recorder for MockAuthClient.
type MockAuthClientMockRecorder struct {
	mock *MockAuthClient
}

// NewMockAuthClient creates a new mock instance.
func NewMockAuthClient(ctrl *gomock.Controller) *MockAuthClient {
	mock := &MockAuthClient{ctrl: ctrl}
	mock.recorder = &MockAuthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthClient) EXPECT() *MockAuthClientMockRecorder {
	return m.recorder
}

// AuthnWithDid mocks base method.
func (m *MockAuthClient) AuthnWithDid(did, nonce string, enc []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthnWithDid", did, nonce, enc)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthnWithDid indicates an expected call of AuthnWithDid.
func (mr *MockAuthClientMockRecorder) AuthnWithDid(did, nonce, enc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthnWithDid", reflect.TypeOf((*MockAuthClient)(nil).AuthnWithDid), did, nonce, enc)
}

// AuthnWithDidRegister mocks base method.
func (m *MockAuthClient) AuthnWithDidRegister(did, nonce string, enc []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthnWithDidRegister", did, nonce, enc)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthnWithDidRegister indicates an expected call of AuthnWithDidRegister.
func (mr *MockAuthClientMockRecorder) AuthnWithDidRegister(did, nonce, enc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthnWithDidRegister", reflect.TypeOf((*MockAuthClient)(nil).AuthnWithDidRegister), did, nonce, enc)
}

// AuthnWithDidStart mocks base method.
func (m *MockAuthClient) AuthnWithDidStart() (auth_apiv1.AuthApiService_AuthnWithDidStartClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthnWithDidStart")
	ret0, _ := ret[0].(auth_apiv1.AuthApiService_AuthnWithDidStartClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthnWithDidStart indicates an expected call of AuthnWithDidStart.
func (mr *MockAuthClientMockRecorder) AuthnWithDidStart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthnWithDidStart", reflect.TypeOf((*MockAuthClient)(nil).AuthnWithDidStart))
}

// Close mocks base method.
func (m *MockAuthClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockAuthClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAuthClient)(nil).Close))
}

// CreateDidRegistrationChallenge mocks base method.
func (m *MockAuthClient) CreateDidRegistrationChallenge(auth_token string) (*auth_client.DidRegistrationChallenge, auth_client.StreamClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDidRegistrationChallenge", auth_token)
	ret0, _ := ret[0].(*auth_client.DidRegistrationChallenge)
	ret1, _ := ret[1].(auth_client.StreamClient)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDidRegistrationChallenge indicates an expected call of CreateDidRegistrationChallenge.
func (mr *MockAuthClientMockRecorder) CreateDidRegistrationChallenge(auth_token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDidRegistrationChallenge", reflect.TypeOf((*MockAuthClient)(nil).CreateDidRegistrationChallenge), auth_token)
}
