// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/user_client/user_client.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/knox-networks/knox-go/model"
	user_client "github.com/knox-networks/knox-go/service/user_client"
)

// MockStreamClient is a mock of StreamClient interface.
type MockStreamClient struct {
	ctrl     *gomock.Controller
	recorder *MockStreamClientMockRecorder
}

// MockStreamClientMockRecorder is the mock recorder for MockStreamClient.
type MockStreamClientMockRecorder struct {
	mock *MockStreamClient
}

// NewMockStreamClient creates a new mock instance.
func NewMockStreamClient(ctrl *gomock.Controller) *MockStreamClient {
	mock := &MockStreamClient{ctrl: ctrl}
	mock.recorder = &MockStreamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamClient) EXPECT() *MockStreamClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStreamClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStreamClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStreamClient)(nil).Close))
}

// WaitForCompletion mocks base method.
func (m *MockStreamClient) WaitForCompletion() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForCompletion")
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForCompletion indicates an expected call of WaitForCompletion.
func (mr *MockStreamClientMockRecorder) WaitForCompletion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForCompletion", reflect.TypeOf((*MockStreamClient)(nil).WaitForCompletion))
}

// MockUserClient is a mock of UserClient interface.
type MockUserClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserClientMockRecorder
}

// MockUserClientMockRecorder is the mock recorder for MockUserClient.
type MockUserClientMockRecorder struct {
	mock *MockUserClient
}

// NewMockUserClient creates a new mock instance.
func NewMockUserClient(ctrl *gomock.Controller) *MockUserClient {
	mock := &MockUserClient{ctrl: ctrl}
	mock.recorder = &MockUserClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserClient) EXPECT() *MockUserClientMockRecorder {
	return m.recorder
}

// AuthenticateWithDid mocks base method.
func (m *MockUserClient) AuthenticateWithDid(did, nonce string, signature []byte) (*model.AuthToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateWithDid", did, nonce, signature)
	ret0, _ := ret[0].(*model.AuthToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateWithDid indicates an expected call of AuthenticateWithDid.
func (mr *MockUserClientMockRecorder) AuthenticateWithDid(did, nonce, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateWithDid", reflect.TypeOf((*MockUserClient)(nil).AuthenticateWithDid), did, nonce, signature)
}

// AuthenticateWithPassword mocks base method.
func (m *MockUserClient) AuthenticateWithPassword(email, password string) (*model.AuthToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateWithPassword", email, password)
	ret0, _ := ret[0].(*model.AuthToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateWithPassword indicates an expected call of AuthenticateWithPassword.
func (mr *MockUserClientMockRecorder) AuthenticateWithPassword(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateWithPassword", reflect.TypeOf((*MockUserClient)(nil).AuthenticateWithPassword), email, password)
}

// AuthnWithDidRegister mocks base method.
func (m *MockUserClient) AuthnWithDidRegister(did, nonce string, enc []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthnWithDidRegister", did, nonce, enc)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthnWithDidRegister indicates an expected call of AuthnWithDidRegister.
func (mr *MockUserClientMockRecorder) AuthnWithDidRegister(did, nonce, enc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthnWithDidRegister", reflect.TypeOf((*MockUserClient)(nil).AuthnWithDidRegister), did, nonce, enc)
}

// Close mocks base method.
func (m *MockUserClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockUserClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockUserClient)(nil).Close))
}

// CreateDidAuthenticationChallenge mocks base method.
func (m *MockUserClient) CreateDidAuthenticationChallenge(did string) (*user_client.DidAuthenticationChallenge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDidAuthenticationChallenge", did)
	ret0, _ := ret[0].(*user_client.DidAuthenticationChallenge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDidAuthenticationChallenge indicates an expected call of CreateDidAuthenticationChallenge.
func (mr *MockUserClientMockRecorder) CreateDidAuthenticationChallenge(did interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDidAuthenticationChallenge", reflect.TypeOf((*MockUserClient)(nil).CreateDidAuthenticationChallenge), did)
}

// CreateDidRegistrationChallenge mocks base method.
func (m *MockUserClient) CreateDidRegistrationChallenge(auth_token string) (*user_client.DidRegistrationChallenge, user_client.StreamClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDidRegistrationChallenge", auth_token)
	ret0, _ := ret[0].(*user_client.DidRegistrationChallenge)
	ret1, _ := ret[1].(user_client.StreamClient)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDidRegistrationChallenge indicates an expected call of CreateDidRegistrationChallenge.
func (mr *MockUserClientMockRecorder) CreateDidRegistrationChallenge(auth_token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDidRegistrationChallenge", reflect.TypeOf((*MockUserClient)(nil).CreateDidRegistrationChallenge), auth_token)
}
